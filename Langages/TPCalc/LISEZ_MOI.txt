Archive fournie par les enseignants pour TPs de TL2
Contenu: 3 implémentations d'une calculette
----------------------------------------------------


1) Chapitre 2 du cours d'amphi.
--------------------------------
  - list.h & list.c: type abstrait de listes.
  - sources BisonYacc/

  A FAIRE: compiler et essayer la calculette (avec les exemples du cours par exemple).

2) TP1: cf. sujet tp1-pcalc.pdf
-------------------------------
   la version fournie ne sait traiter qu'une expression réduite à un
   entier d'un seul chiffre !

  - Makefile: pour compilation fichiers C.
  - lexer.h: spécification de l'analyseur lexical
  - lexer.c: à compléter
    => utiliser "debug_lexer" pour vérifier
  - pcalc.c: à compléter

  A FAIRE dans l'ordre:
    - Compléter lexer.c (cf. question 5 du sujet), en utilisant debug_lexer.
      Vérifier que tous les tokens sont reconnus.
      Vérifier aussi des suites de tokens.
    - Dans pcalc.c: compléter "parse_exp" (cf. question 7 du sujet).
      Tester déjà quelques expressions simples.
    - Dans pcalc.c: compléter "parse_input" (cf. question 8 du sujet).
      Tester bien l'utilisation des variables.
      
3) TP2: cf. sujet tp2-calc.pdf
------------------------------

  A FAIRE:
  - étendre lexer.c & lexer.h pour ajouter les parenthèses.
  - compléter calc.c (cf. sujet tp2-calc.pdf)

Question optionnelle:

Améliorer la calculette de manière à ce qu'elle ne s'arrête pas à la
première erreur: après un message d'erreur (ou plusieurs), elle rend
la main à l'utilisateur en ayant consommé les tokens jusqu'au prochain
QUEST. Ainsi, l'utilisateur peut rentrer un nouveau calcul.

Pour réaliser cela, on peut utiliser la technique de rattrapage
d'erreur du chapitre 6. On peut aussi se contenter d'un mécanisme
légèrement plus simple. Par exemple, on modifie les fonctions de
parsing des expressions, de manière à ce qu'elle retourne un booléen
(codé comme un int) indiquant s'il y a erreur ou pas. Quand il y a
erreur dans une sous-expression, le parsing de la sur-expression
propage l'erreur. C'est donc uniquement dans le parsing de input qu'on
``rattrape'' l'erreur, en consommant les tokens à ignorer. Quelque
soit votre technique, pensez à modifier l'analyseur lexical, de
manière à ce que les erreurs lexicales soient aussi rattrapées.
