Cours : 10.4
Jeu de piste : E11

~ : pseudo de notre répertoire personnel (ou domicile) /~ = /user/6/yoeungm
~nom_user : pour aller dans le répertoire d'un autre utilisateur (si on a les droits)
~/.local/share/Trash/files : corbeille

atom : edit > preference > packages > options (linter pylint...)

cp ~jdpunix/jeu-de-piste/etape_b1.py . : étape du jeu de piste
le . correspond à ./ qui correspond au répertoire courant

/bin/
    Contient les fichiers exécutables strictement nécessaires au fonctionnement du système.
/usr/bin/
    Contient la plupart des fichiers exécutables du système. Il y en a beaucoup !
/etc/
    Contient les fichiers de configuration globaux du système.
/var/
    Contient les données gérées par le système.

cd repertoire : change directory
cd (sans rien) : cd ~ : cd au répertoire domicile

ls : liste les répertoires à un chemin donné en paramètre
-l : long : plus précis
-a : all : même les fichies cachés (.fichier)

mkdir : créer un répertoire

rm : supprime un fichier (commande générale qui supprime définitivement car ne met pas dans la poubelle)
rmdir : supprime un répertoire
rm -r : commande générale avec l'option r qui permet de supprimer un fichier de façon récursif (donc un répertoire et tout ce qu'il y a dedans) (= rmdir)

cp : copie un fichier dans ...
cp -r : permet de copier un fichier de façon récursif (donc un répertoire et tout ce qu'il y a dedans)


less : liste le contenu d'un fichier

mv : déplace ... dans ...
     mais aussi peut renommer le fichier ... en ... (si déplacement dans le même répertoire)
     on peut aussi déplacer et changer en même temps le nom du fichier

window : unix (LibreOffice > OpenDocument)
.doc : .odt : document texte (word...)
.xls : .ods : tableur (excel...)
.ppt : .odp : présentation (powerpoint...)

libreoffice : permet d'ouvrir un doc .odt (ou .txt ou .jpg ou .pdf ... mais modifié)

eog : permet de lire une image (fichier JPEG, PNG, GIF...) avec le logiciel Eye Of Gnome

acroread : permet de lire un .pdf (juste pour l'affichage) avec le logiciel Acrobat Reader
evince : idem

gimp : logiciel de retouche numérique

LaTeX : écriture d'un document texte (fichier.tex) qu'on peut compiler
pdflatex fichier.tex : convertit un fichier .tex en .pdf

atom : permet d'éditer du texte
vim : idem
emacs : idem
atom . : ouvre tous les fichiers du répertoire courant

atom [chemin] [nouveau_fichier] : créer un nouveau fichier là ou on veut

python3 fichier.py : exécute un fichier en python 3

#! /usr/bin/env python3 : à mettre en première ligne du script pour spécifier qu'il s'agit d'un programme python3 (et pas une ancienne version de python par exemple)

chmod +x [nom_fichier] : pour rajouter le droit en exécution

flake8 [nom_fichier] : logiciel pour détecter à la volée les erreurs / bugs potentiels à un instant t
pylint : encore plus exigeant que flake8

sleep [nombre_de_secondes] : met en pause le programme (on perd la main)
ctrl+c : pour nous redonner la main (si on ouvre un autre processus comme un logiciel etc...) en tuant l'application qui a été lancé à partir de ce terminal
commande & : pour nous donner la main juste après l’exécution d’une commande qui était censé nous faire perdre la main

ctrl + / : commente ou décommente un bloc de code

file : permet de "deviner" le type (au sens précis) d'un fichier (image, text...) mais pas toujours correct

droits : ugo : user group others (a pour all : tous)
user : utilisateur
group : chaque utilisateur appartient à un ou plusieurs groupes
	(par ex moi, "yoeungm" appartiens au groupe "etudiants"
others : tous les autres utilisateurs
Si un utilisateur est susceptible d'appartenir à plusieurs catégories, il appartient au plus propriétaire ; user > group > others
Donc en majorité, nos fichiers appartiennent à user
rwx : read write execute
Pour un répertoire :
read : lister contenu du répertoire (ls)
write : créer ou détruire un objet dans le répertoire (rm...)
execute : traverser le répertoire (cd)

chmod u-xw,go+w fichier : pour modifier les droits d'un fichier
= chmod u=r,go=rwx (dans notre cas)

setfacl -m u:yoeungm:r fichier : donner le droit à un utilisateur précis d'écrire dans un fichier

Remarques :
- On ne peut pas modifier un fichier sur lequel on a les droits en écriture mais qui se trouve dans un répertoire dans lequel on a pas le droit en écriture (par contre si le fichier se trouve dans un sous répertoire (d'un répertoire interdit en écriture) dont on a les droits en écriture, on peut)
- On peut lire dans un fichier qui se trouve dans un répertoire interdit à la lecture seulement dans le cas ou il se trouve dans un sous répertoire dont la lecture est autorisée
- On ne peut pas exécuter un fichier lorsqu'il se trouve dans un répertoire interdit en exécution (dans tous les cas) (car il faut pouvoir rentrer dans le fichier interdit avant de faire la suite)
- L'interdiction en exécution du répertoire courant nécessite de mettre "." et doit etre évité

Espace disque :
du (disk used) : pour connaître l'utilisation d'espace disque d'un fichier ou d'un répertoire (répertoire courant par défaut)
du -sh : pour summary (total en une ligne) et human readable (avec les unités)
df (disk fgree) : pour connaître l'espace disque pour chaque disque dur de la machine (chaque partition)
df -h : pour human readable (avec les unités)

Lecture du contenu d'un fichier :
less > more
less : entrée pour faire apparaître une ligne supplémentaire
       espace pour faire apparaître une page supplémentaire
       q pour quitter
       / pour chercher un mot
       & pour afficher les lignes contenant un motif de texte

less peut aussi être utilisé pour améliorer la lisibilité avec une autre commande (comme ls)
ls /usr/bin | less : on fait un less sur le résultat de l'affichage de ls

Lien symbolique :
Fait référence à un fichier ou à un répertoire
ln -s chemin_pointé nom_du_lien : création d'un lien symbolique

Remarque : La plupart des opérations (ouverture, lecture, 		   écriture) sur un lien symbolique le déréférencent 		   automatiquement et opèrent sur sa destination
	   La suppression (rm) et le déplacement/renommagemv) 	         portent sur le lien lui-même et n'affectent pas la 		   cible

Trouver un fichier :

find repertoire_depart criteres : permet de trouver un fichier
find . -name ... : permet de trouver un fichier par son nom à partir du répertoire courant (en descendant l'arborescence à partir du répertoire courant uniquement)
find . -name '*.py' : les fichiers qui ont l'extension .py
find . -mtime 6 : les fichiers dont on a édité il y a 6 jours

find . \( -name "*.py" -o -name "*.pyc" \) \-ctime +6 -a -ctime -14 \! -newer toto.py
: retrouver tous les fichiers python (source et byte code) que l'on a édité pendant la semaine dernière il y a plus de 6 fois 24 heures et moins de 14 fois 24 heures) sauf ceux qu'on a modifié après le fichier toto.py

Recherche dans un fichier :

grep expression_reguliere fichier1 fichier2 : recherche les lignes qui comportent une chaîne de caractère qui suit une expression régulière dans un (ou plusieurs) fichier(s)
cas particulier : expression_reguliere = chaine

Recherche dans un texte :
En combinant, avec | grep ...
Exemple : ps -A | grep gnome

Compression-decompression d'un fichier (avec gzip) :

gzip nom_fichier : compresse en .gz un fichier
gunzip nom_fichier.gz : décompresse un fichier .gz

Archiver plusieurs fichiers ou répertoires (avec tar) :

tar -cvf nom_fichier_cree.tar chemin_repertoire : archive en regroupant les fichiers et les répertoires dans un répertoire en un fichier nom_fichier_cree.tar
tar -xvf nom_fichier.tar : extrait le contenu d'une archive (nom_fichier.tar qui est un fichier .tar)

Archiver et compresser (avec tar) :

tar -czvf nom_fichier_cree.tar.gz chemin_repertoire : archive et compresse un répertoire en un fichier nom_fichier_cree.tar.gz (ou .tgz)
tar -xzvf nom_fichier_cree.tar.gz : décompresse et extrait un fichier .tar.gz

Archiver et compresser (avec zip) :

(Zip est un format qui est utilisé par tout le monde : ceux qui n'utilisent pas Unix, donc c'est le format à préférer)
zip -r nom_fichier_cree.zip chemin_repertoire : archive et compresse un répertoire en un fichier nom_fichier_cree.zip
unzip nom_fichier_cree.zip : décompresse et extrait un fichier .zip

Impression de documents :

lpstat -p nom_imprimante : pour voir les travaux en attente
cancel numero_impression : pour annuler l'impression s'il n'est pas trop tard
a2ps nom_fichier : lance l'impression du fichier (mise en page implicite en convertissant le fichier sous format .ps PostScript)
a2ps -o nom_fichier_reception.ps nom_fichier1 : envoie le résultat de la mise en page de l'impression dans nom_fichier_reception.ps (PostScript) (on peut mettre plusieurs nom_fichier pour avoir plusieurs pages dans nom_fichier_reception.ps)
lpr nom_fichier.ps : imprime un fichier sous format .ps (PostScript) uniquement
lp nom_fichier.ps : imprime un fichier sous format .ps (PostScript) uniquement
ps2pdf nomfichier.ps : convertit un fichier .ps en .pdf
pdf2ps nomfichier.pdf : convertit un fichier .pdf en .ps

Obtenir de l'aide :

nom_commande --help : aide rapide sur la commande (ou "help nom_commande" ou "nom_commande --h")
man nom_commande : ouvre la page du manuel unix concernant la commande (affiché sous la commande less donc on peut utiliser / pour chercher un mot par exemple)
info nom_commande : permet d'avoir beaucoup d'informations (comme avec man) sur une commande

Processus :

users : liste les utilisateurs qui exécutent des programmes (processus actifs) sur le même serveur que nous
top : liste les processus sur la machine par ordre décroissant d'utilisation des ressources du processeur
ps : liste tous les processus (programmes en cours d'exécution) de la machine
ps -u nom_user : liste les processus de nom_user
ps : liste les processus (sauf ce bash) de l'utilisateur courant
ps u : liste les processus en mode joli
ps -a : liste les processus (avec ce bash) de l'utilisateur courant
ps -A : liste tous les processus du système
ps -ef : liste tous les processus tournant sur la machine
lsof : liste les fichiers ouverts qui m'appartiennent

Fenêtre != processus
Les droits d'un processus sur les fichiers sont ceux de son propriétaire

kill numero_pid : demande à un processus de se terminer
kill -9 numero_pid : ordonne à un processus de se terminer
kill -9 -1 : ordonne à tous les processus de la session de se terminer (sans sauvegarde)
pkill nom_processus : termine un processus à partir de son nom de programme
Ctrl + C : raccourci pour terminre un processus (raccourci de kill)
xkill : lancé depuis un terminal, si on clique sur une fenêtre, on tue l'application à laquelle appartient cette fenêtre

Redirection des entrées sorties :

commande < nom-fichier-entree : redirection de l'entrée
commande > nom-fichier-sortie : redirection vers la sortie
commande < nom-fichier-entree > nom-fichier-sortie : redirection de l'entrée et le résultat vers la sortie
cat fic1 fic2 : afficher sur la sortie standard le contenu des fichiers passés en paramètre
sort fic > fic_sorted : tri les lignes par ordre alphanumérique (premier caractère de chaque ligne) et redirige le résultat du tri vers un autre fichier

wc : permet de compter mots ou lignes ou caractères ce qu'on lui donne en entrée (entrée standard puis ctrl+D pour lui dire qu'on a fini ou redirection ou "|")
wc -w : compter les mots
wc -l : compter les lignes
wc -c < fichier : redirection pour compter
ls | wc -l : "redirection pour les commandes" pour compter (ici le nombre d'éléments dans ls)

Les tuyaux ("|") :

commande1 | commande2 : coopération de deux processus dans une chaîne, commande2 s'exécute sur l'information produite par commande1

ll | sort -n -k 5 : tri par ordre croissant les fichiers par taille

ps -ef | grep nom_login : affiche parmi tous les processus tournant sur la machine seulement les lignes qui contiennent nom_login

Tri :

sort -n -k 5 : prend un tableau en entrée et fait un tri croissant sur la valeur de la 5ième colonne

Historique :

history : permet d'obtenir la liste des dernières commandes avec leur numéro
!numero_historique : réexécuter la commande identifiée par son numero_historique

La convention ~ :

~/nom_user remplacé par /users/nom_user : si l'utilisateur existe
~/ remplacé par /users/yoeungm : si pas d'utilisateur, c'est nous-même

Les wildcards (métacaractères) :

permet de désigner plusieurs fichiers à la fois
* : remplace séquence de caractères quelconque (même la séquence vide)
? : remplace un et un seul caractère quelconque
[abc] : remplace soit a soit b soit c (ou exclusif)
[a-f] : remplace un caractère entre a et f (plage de caractères)
[^abc] : remplace n'importe quel caractère autre que a ou b ou c (complémentaire)
voir : man 7 glob / man 7 regex
\*.txt ou "*".txt ou '*'.txt : pour ne pas interprêter les wildcards (désigne le fichier *.txt)

Lancer plusieurs tâches (ou applications) en même temps :

On lance une application mais on a plus la main sur le terminal
Ctrl+z : stop l'exécution de l'application
bg [num_job] : met l'exécution de l'application (identifiée par son numéro de job) en arrière-plan
fg [num_job] : met l'exécution de l'application (identifiée par son numéro de job) en avant-plan
jobs : pour avoir les applications et leur numéro de job

ou on lance l'application avec "&" : revient à lancer l'application, faire Ctrl+z et bg [num_job]

Configuration du bash :

~/.bashrc : contient les lignes de commandes (création alias, affectation de valeurs à des variables du shell) qui seront lues à chaque lancement d'un shell
nom_var=valeur : créé une variable (couple nom,valeur) dans le shell (ne pas mettre d'espace "nom_var = valeur")
$nom_var : permet d'accéder à la valeur de la variable (par ex, si elle contient un chemin de fichier)
set : pour connaître l'ensemble des variables et leur valeur à un instant donné
$nom_var=$nom_var1$nom_var2"chaine" : on peut affecter une variable en réutilisant (en concaténant) les variables de la sorte
On peut aussi stocker une commande dans une variable et appeler la commande avec $nom_var (comme un alias mais moins pratique)
Mais ces variables ne sont pas visibles par les autres applications
export nom_var : convertit la variable en variable d'environnement (visible par les autres applications) (on peut export pendant la création de la variable)
env : pour connaître l'ensemble des variables d'environnement (seulement) à un instant donné
alias nom_alias=commande : permet de créer un alias pour une commande

Emplacement des commandes :

echo $PATH : affiche le contenu de la variable d'environnement PATH : définit une liste de répertoires par défaut où le système va chercher les exécutables
Lorsqu'on fait "firefox" (pour éviter de taper tout le chemin /usr/bin/firefox ou pour éviter de se placer dans /usr/bin/ et faire ./firefox), le shell va chercher dans la variable et va concaténer "firefox" sur chaque élément de la liste dans PATH
type nom_commande : permet de savoir l'emplacement de la commande (du programme)
Mais pour les commandes internes (cd etc.), ce n'est pas la même chose
Au début d'un programme interprêté (traduit en langage machine à la volée), on indique au système quel interprêteur utiliser avec "#! ..."
\commande : pour utiliser la vraie commande et non l'alias (si on a donné comme nom d'alias le nom d'une commande existante)

----- jeu de piste -----

pdflatex fichier.tex : compiler fichier latex
file nom_fichier : permet de savoir le type d'un fichier (si pas d'extension .) ainsi que le type d'encodage du fichier (UTF-8 etc.)
iconv --from utf-8 --to latin1 toto.txt -o titi.txt : permet de convertir le fichier toto.txt qui est en UTF-8 en le fichier titi.txt qui sera en latin1
recode : permet de convertir le type d'encodage d'un fichier aussi
Ctrl + D : Demande l'arrêt d'un programme car on a fini (EOF : end of file)
Ctrl + C : Force l'arrêt d'un programme (SIGINT : interruption)
./decoder.py < etape-E5.txt | ./decoder_bis.py : exemple pipe | avec double décodage successifs

sort | find -type f -size +500c : exemple trouver fichier le plus volumineux (en tatonnant avec -size et en faisant sort)
find ./ -type f | xargs ls -l | sort -n -k 5 : trouve les fichiers dans un répertoire, on le combine | avec xargs qui permet de reprendre le résultat de find pour faire un ls -l puis on le combine | avec sort sur la taille (on peut rajouter "| tail -n 1")
find ./ -type f -exec ls -l \; | sort -n -k 5 : trouve les fichiers dans un répertoire, on utilise -exec de find qui permet de reprendre le résultat de find pour faire un ls -l et s'arrêter à la fin ";" puis on le combine | avec sort sur la taille
ls -lR ./ | sort -n -k 5 : on fait un ls -l récursif sur le répertoire courant puis on le combine | avec sort sur la taille
find ./ -type f -exec wc -c {} \; | sort -n : méthode plus difficile
-> 5 méthodes pour trouver le fichier le plus gros

grep -r "Bravo, vous avez trouve l'etape E8." : exemple qui permet de trouver les fichiers qui contiennent cette chaîne de caractère
find . -type f | xargs grep "Bravo, vous avez trouve l'etape E8." : cherches dans tous les fichiers du répertoire courant s'il contient la chaîne de caractère

cat etape_E10.txt | grep "ETAPE-E10" : ne garde que les lignes qui contiennent "ETAPE-E10"

wget http://lig-enseignement.imag.fr/jeu-de-piste/yntsf/etape-E11.txt : permet de télécharger directement le fichier à l'url donné dans le répertoire courant

----------

Accéder à l'Ensimag depuis l'extérieur :

scp creeSurPC votre-login@pcserveur.ensimag.fr:copieDistante : permet de transférer des fichiers avec le protocole FTP ou SFTP
rsync : comme scp mais en mieux (mais parfois pas implémentée) 
ssh votre-login@pcserveur.ensimag.fr (si extérieur) OU ssh pcserveur.ensimag.fr (si intérieur) : permet de se connecter à pcserveur (même contenu que notre compte ensimag si intérieur) avec le protocole SSH   
.ssh/know_hosts : fichier qui stocke les signatures des machines auxquelles on s'est connecté
ssh -x pcserveur.ensimag.fr : permet de se connecter à pcserveur mais avec interface graphique (donc on peut lancer des éditeurs de texte etc.)
Emacs permet d'utiliser ce genre de transfert directement : /votre-login@pcserveur.ensimag.fr:fichier.txt
Gnome et KDE permettent aussi ce genre de transfert : sftp://votre-login@pcserveur.ensimag.fr/ (à entrer à la place d'un nom de fichier dans le sélecteur de fichier)
screen : permet de lancer une commande et de fermer la session sans attendre la fin (on détache "screen" avec Ctrl+a puis d et on se réattache avec la commande "screen -r")